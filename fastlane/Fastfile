# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.137.0"
REQUIRED_XCODE_VERSION = "11.2"
default_platform :ios

platform :ios do
  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # - <short hash> <commit title>
    return changelog_from_git_commits(pretty: "- %s (%h)")
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
  end

  def complete_version_number
    return version_string(get_version_number(target: "HomeAssistant"), get_build_number)
  end

  def bundle_id(suffix="")
    prefix = get_xcconfig_value(name: "BUNDLE_ID_PREFIX", path: "Configuration/HomeAssistant.xcconfig")

    "#{prefix}.HomeAssistant" + (suffix.empty? ? "" : ".#{suffix}")
  end

  def bundle_ids(environment="Release")
    prefixed_bundle_id = bundle_id()

    if environment == "Debug" || environment == "Development" || environment == "Dev"
      prefixed_bundle_id = bundle_id("dev")
    elsif environment == "Beta"
      prefixed_bundle_id = bundle_id("beta")
    end

    ids = [
      "APNSAttachmentService",
      "Intents",
      "NotificationContentExtension",
      "TodayWidget",
      "watchkitapp",
      "watchkitapp.watchkitextension"
    ].map { |id| "#{prefixed_bundle_id}.#{id}"}

    ids.unshift("#{prefixed_bundle_id}")

    return ids
  end

  def provisioning_profile_map(environment="")
    id = bundle_id()
    destination = "AppStore"
    if environment == "Debug" || environment == "Development" || environment == "Dev"
      id = bundle_id("dev")
      destination = "Development"
    elsif environment == "Beta"
      id = bundle_id("beta")
    end

    return {
      "#{id}" => "match #{destination} #{id}",
      "#{id}.APNSAttachmentService" => "match #{destination} #{id}.APNSAttachmentService",
      "#{id}.NotificationContentExtension" => "match #{destination} #{id}.NotificationContentExtension",
      "#{id}.Intents" => "match #{destination} #{id}.Intents",
      "#{id}.watchkitapp" => "match #{destination} #{id}.watchkitapp",
      "#{id}.watchkitapp.watchkitextension" => "match #{destination} #{id}.watchkitapp.watchkitextension",
    }
  end

  def provisioning_profile_template_name(environment="")
    if !get_xcconfig_value(name: "ENABLE_CRITICAL_ALERTS", path: "Configuration/HomeAssistant.xcconfig").to_i.zero?
      if environment == "Debug" || environment == "Development" || environment == "Dev"
        return "Critical Alerts iOS (Dev)"
      else
        return "Critical Alerts iOS (Dist)"
      end
    end

    return nil
  end

  before_all do
    setup
  end

  private_lane :setup do
    ENV["DELIVER_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["FASTLANE_TEAM_ID"] = ENV["HOMEASSISTANT_TEAM_ID"]
    ENV["MATCH_GIT_URL"] = ENV["HOMEASSISTANT_CERTIFICATE_GIT"]
    ENV["MATCH_PASSWORD"] = ENV["HOMEASSISTANT_CERTIFICATE_KEY"]
    ENV["PILOT_APPLE_ID"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["SIGH_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["LOKALISE_API_TOKEN"] = ENV["HOMEASSISTANT_LOKALIZE_TOKEN"]
    ENV["LOKALISE_PROJECT_ID"] = ENV["HOMEASSISTANT_LOKALIZE_PROJECT_ID"]
    ENV["PILOT_ITC_PROVIDER"] = ENV["HOMEASSISTANT_ITUNES_TEAM_ID"]
  end

  desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
  lane :certs do
    match(app_identifier: [bundle_id(), bundle_id("beta")],
          type: "appstore",
          template_name: provisioning_profile_template_name())
    match(app_identifier: bundle_id("dev"),
          type: "development",
          template_name: provisioning_profile_template_name("Dev"))

    appstore_ids = bundle_ids("Release") + bundle_ids("Beta")

    match(app_identifier: appstore_ids, type: "appstore")
    match(app_identifier: bundle_ids("Dev"), type: "development")
  end

  lane :refresh_dsyms do
    FileUtils.mkdir_p '../dSYMs'
    download_dsyms(output_directory: "./dSYMs", app_identifier: bundle_id())
    dir = "../dSYMS"
    files = Dir.foreach(dir).map { |x| File.expand_path("#{dir}/#{x}") }.select { |x| File.file?(x) }
    upload_symbols_to_crashlytics(gsp_path: "./HomeAssistant/Resources/GoogleService-Info-Release.plist",
                                  dsym_paths: files, dsym_worker_threads: 6)
    clean_build_artifacts
  end

  lane :refresh_beta_dsyms do
    FileUtils.mkdir_p '../dSYMs'
    download_dsyms(output_directory: "./dSYMs", app_identifier: bundle_id("beta"))
    dir = "../dSYMS"
    files = Dir.foreach(dir).map { |x| File.expand_path("#{dir}/#{x}") }.select { |x| File.file?(x) }
    upload_symbols_to_crashlytics(gsp_path: "./HomeAssistant/Resources/GoogleService-Info-Beta.plist",
                                  dsym_paths: files, dsym_worker_threads: 6)
    clean_build_artifacts
  end

  desc "Fetches the push notification certificates and saves them as p12 files in push_certs/, perfect for direct upload to AWS SNS. p12 password is password."
  lane :push_certs do
    pem(app_identifier: bundle_id(), output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")
    pem(app_identifier: bundle_id(), development: true, output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")

    pem(app_identifier: bundle_id("beta"), output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")

    pem(app_identifier: bundle_id("dev"), development: true, output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")
  end

  desc "Generate proper icons for all build trains"
  lane :icons do
    appicon(appicon_path: "HomeAssistant/Resources/Assets.xcassets", appicon_image_file: "icons/dev.png", appicon_name: "AppIcon.dev.appiconset", appicon_devices: [:ipad, :iphone, :ios_marketing])
    appicon(appicon_path: "HomeAssistant/Resources/Assets.xcassets", appicon_image_file: "icons/beta.png", appicon_name: "AppIcon.beta.appiconset", appicon_devices: [:ipad, :iphone, :ios_marketing])
    appicon(appicon_path: "HomeAssistant/Resources/Assets.xcassets", appicon_image_file: "icons/release.png", appicon_devices: [:ipad, :iphone, :ios_marketing])

    appicon(appicon_path: "WatchApp/Assets.xcassets", appicon_image_file: "icons/dev.png", appicon_name: "WatchIcon.dev.appiconset", appicon_devices: [:watch, :watch_marketing])
    appicon(appicon_path: "WatchApp/Assets.xcassets", appicon_image_file: "icons/beta.png", appicon_name: "WatchIcon.beta.appiconset", appicon_devices: [:watch, :watch_marketing])
    appicon(appicon_path: "WatchApp/Assets.xcassets", appicon_image_file: "icons/release.png", appicon_name: "WatchIcon.appiconset", appicon_devices: [:watch, :watch_marketing])
  end

  desc "Download latest localization files from Lokalize"
  lane :update_strings do
    lokalise(destination: "HomeAssistant/Resources/", use_original: true)
    sh("cd ../ && ./Pods/SwiftGen/bin/swiftgen strings --output Shared/Resources/SwiftGen/Strings.swift --templateName structured-swift4 HomeAssistant/Resources/en.lproj/Localizable.strings")
  end

  desc "Upload iTunes Connect metadata to Lokalise"
  lane :update_lokalise_metadata do
    lokalise_metadata(action: "update_lokalise", override_translation: true)
  end

  desc "Download iTunes metadata from Lokalise and upload to iTunes Connect"
  lane :update_itunes_metadata do
    lokalise_metadata(action: "update_itunes")
  end

  desc "Bump build number"
  lane :bump_build do
    git_pull(only_tags: true)

    increment_version_number(version_number: get_version_number(target: "HomeAssistant"))
    increment_build_number

    finalize_bump
  end

  desc "Bump version number"
  lane :bump_version do
    git_pull(only_tags: true)

    increment_version_number
    increment_build_number(build_number: 1)

    finalize_bump
  end

  lane :set_beta_version do
    increment_version_number(version_number: get_version_number(target: "HomeAssistant"))
    increment_build_number(build_number: latest_testflight_build_number(app_identifier: bundle_id("beta"), version: get_version_number(target: "HomeAssistant")) + 1)
  end

  private_lane :finalize_bump do
    # Needed so that the changelog doesn"t include the version bump commit
    change_log = change_log_since_last_tag

    commit_message = "Version bump to #{complete_version_number}"

    if is_ci
      commit_message = "[ci skip] Version bump to #{complete_version_number}"
    end

    commit_version_bump(message: commit_message, xcodeproj: "HomeAssistant.xcodeproj")

    push_to_git_remote(remote_branch: git_branch)

    set_github_release(
      repository_name: "home-assistant/ios",
      api_token: ENV["HOMEASSISTANT_GITHUB_API_TOKEN"],
      name: complete_version_number,
      tag_name: tag_name("testflight", get_version_number(target: "HomeAssistant"), get_build_number),
      description: change_log || "Release commit",
      is_prerelease: false
    )
  end

  desc "Runs build when on Travis"
  lane :ci do
    if is_ci && ENV["TRAVIS_PULL_REQUEST"] == "false" && (git_branch == "master" || git_branch == "beta")
      ENV["FASTLANE_PASSWORD"] = ENV["HOMEASSISTANT_ITUNES_PASSWORD"]

      slack(message: "Beginning Travis CI build")
      create_keychain(
        name: ENV["MATCH_KEYCHAIN_NAME"],
        password: ENV["MATCH_PASSWORD"],
        timeout: 3600,
        default_keychain: true,
      )

      app_ids = []

      if git_branch == "master"
        app_ids = bundle_ids()
      elsif git_branch == "beta"
        app_ids = bundle_ids("Beta")
      end

      match(app_identifier: app_ids,
            type: "appstore",
            readonly: true,
            template_name: provisioning_profile_template_name(),
            keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
            keychain_password: ENV["MATCH_PASSWORD"])

      sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{ENV["HOMEASSISTANT_CERTIFICATE_KEY"]} #{ENV["MATCH_KEYCHAIN_NAME"]}")

      itunes
    elsif !is_ci || ENV["TRAVIS_PULL_REQUEST"] != "false"
      run_tests(workspace: 'HomeAssistant.xcworkspace',
                scheme: 'Debug')
    end
  end

  desc "Submit a new beta build to TestFlight"
  lane :itunes do |options|

    # Needed so that the changelog doesn"t include the version bump commit
    change_log = change_log_since_last_tag

    if git_branch == "master"
      bump_build
    elsif git_branch == "beta"
      set_beta_version
    end

    clean_build_artifacts
    clear_derived_data

    cocoapods(repo_update: true)

    if is_ci
      slack(message: "Completed bump, clean and CocoaPods install, now beginning build")
    end

    scheme = nil
    config = nil
    app_id = nil
    provisioningProfiles = {}

    if git_branch == "master"
      scheme = "Release"
      config = "Release"
      app_id = bundle_id()
      provisioningProfiles = provisioning_profile_map()
    elsif git_branch == "beta"
      scheme = "Beta"
      config = "Beta"
      app_id = bundle_id("beta")
      provisioningProfiles = provisioning_profile_map("Beta")
    end

    gym(scheme: scheme, configuration: config, export_options: { provisioningProfiles: provisioningProfiles }, xcconfig: "Configuration/HomeAssistant.#{config.downcase}.xcconfig")

    if is_ci
      slack(message: "Build complete, now uploading to TestFlight, this will take 15-60 minutes")
    end

    pilot(
      app_identifier: app_id,
      changelog: change_log,
      distribute_external: true,
      groups: ["App Store Connect Users", "Friendly Testers Link", "Public Signup Link", "Website redirect"]
    )

    rocket
  end
end
